{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:3001/api/auth';\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Verificar si el usuario ya está logueado\n    this.checkAuthStatus();\n  }\n  checkAuthStatus() {\n    const token = this.getToken();\n    if (token) {\n      this.verifyToken().subscribe(response => {\n        if (response.success && response.usuario) {\n          this.isLoggedInSubject.next(true);\n          this.currentUserSubject.next(response.usuario);\n        } else {\n          this.logout();\n        }\n      });\n    }\n  }\n  getAuthHeaders() {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  register(name, email, password) {\n    const body = {\n      nombreCompleto: name,\n      email: email,\n      password: password\n    };\n    return this.http.post(`${this.API_URL}/registro`, body, {\n      headers: this.getAuthHeaders()\n    }).pipe(map(response => {\n      if (response.success && response.token && response.usuario) {\n        this.setToken(response.token);\n        this.isLoggedInSubject.next(true);\n        this.currentUserSubject.next(response.usuario);\n      }\n      return response;\n    }), catchError(error => {\n      console.error('Error en registro:', error);\n      return of({\n        success: false,\n        message: error.error?.message || 'Error de conexión con el servidor'\n      });\n    }));\n  }\n  login(email, password) {\n    const body = {\n      email: email,\n      password: password\n    };\n    return this.http.post(`${this.API_URL}/login`, body, {\n      headers: this.getAuthHeaders()\n    }).pipe(map(response => {\n      if (response.success && response.token && response.usuario) {\n        this.setToken(response.token);\n        this.isLoggedInSubject.next(true);\n        this.currentUserSubject.next(response.usuario);\n      }\n      return response;\n    }), catchError(error => {\n      console.error('Error en login:', error);\n      return of({\n        success: false,\n        message: error.error?.message || 'Error de conexión con el servidor'\n      });\n    }));\n  }\n  verifyToken() {\n    return this.http.get(`${this.API_URL}/verificar`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(error => {\n      console.error('Error verificando token:', error);\n      return of({\n        success: false,\n        message: 'Token inválido'\n      });\n    }));\n  }\n  logout() {\n    localStorage.removeItem('authToken');\n    this.isLoggedInSubject.next(false);\n    this.currentUserSubject.next(null);\n  }\n  setToken(token) {\n    localStorage.setItem('authToken', token);\n  }\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  getUserEmail() {\n    const user = this.getCurrentUser();\n    return user ? user.email : null;\n  }\n  getUserName() {\n    const user = this.getCurrentUser();\n    return user ? user.nombreCompleto : null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","of","map","catchError","AuthService","constructor","http","API_URL","isLoggedInSubject","isLoggedIn$","asObservable","currentUserSubject","currentUser$","checkAuthStatus","token","getToken","verifyToken","subscribe","response","success","usuario","next","logout","getAuthHeaders","register","name","email","password","body","nombreCompleto","post","headers","pipe","setToken","error","console","message","login","get","localStorage","removeItem","setItem","getItem","isAuthenticated","getCurrentUser","value","getUserEmail","user","getUserName","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jhoel\\OneDrive\\Escritorio\\FoodiesBNB\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nexport interface User {\r\n  _id?: string;\r\n  nombreCompleto: string;\r\n  email: string;\r\n  rol?: string;\r\n  fechaRegistro?: Date;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  token?: string;\r\n  usuario?: User;\r\n  errores?: any[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = 'http://localhost:3001/api/auth';\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\r\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Verificar si el usuario ya está logueado\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  private checkAuthStatus(): void {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      this.verifyToken().subscribe(response => {\r\n        if (response.success && response.usuario) {\r\n          this.isLoggedInSubject.next(true);\r\n          this.currentUserSubject.next(response.usuario);\r\n        } else {\r\n          this.logout();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.getToken();\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': token ? `Bearer ${token}` : ''\r\n    });\r\n  }\r\n\r\n  register(name: string, email: string, password: string): Observable<AuthResponse> {\r\n    const body = {\r\n      nombreCompleto: name,\r\n      email: email,\r\n      password: password\r\n    };\r\n\r\n    return this.http.post<AuthResponse>(`${this.API_URL}/registro`, body, {\r\n      headers: this.getAuthHeaders()\r\n    }).pipe(\r\n      map(response => {\r\n        if (response.success && response.token && response.usuario) {\r\n          this.setToken(response.token);\r\n          this.isLoggedInSubject.next(true);\r\n          this.currentUserSubject.next(response.usuario);\r\n        }\r\n        return response;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error en registro:', error);\r\n        return of({\r\n          success: false,\r\n          message: error.error?.message || 'Error de conexión con el servidor'\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  login(email: string, password: string): Observable<AuthResponse> {\r\n    const body = {\r\n      email: email,\r\n      password: password\r\n    };\r\n\r\n    return this.http.post<AuthResponse>(`${this.API_URL}/login`, body, {\r\n      headers: this.getAuthHeaders()\r\n    }).pipe(\r\n      map(response => {\r\n        if (response.success && response.token && response.usuario) {\r\n          this.setToken(response.token);\r\n          this.isLoggedInSubject.next(true);\r\n          this.currentUserSubject.next(response.usuario);\r\n        }\r\n        return response;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error en login:', error);\r\n        return of({\r\n          success: false,\r\n          message: error.error?.message || 'Error de conexión con el servidor'\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  verifyToken(): Observable<AuthResponse> {\r\n    return this.http.get<AuthResponse>(`${this.API_URL}/verificar`, {\r\n      headers: this.getAuthHeaders()\r\n    }).pipe(\r\n      catchError(error => {\r\n        console.error('Error verificando token:', error);\r\n        return of({\r\n          success: false,\r\n          message: 'Token inválido'\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('authToken');\r\n    this.isLoggedInSubject.next(false);\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  private setToken(token: string): void {\r\n    localStorage.setItem('authToken', token);\r\n  }\r\n\r\n  private getToken(): string | null {\r\n    return localStorage.getItem('authToken');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    return !!token;\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  getUserEmail(): string | null {\r\n    const user = this.getCurrentUser();\r\n    return user ? user.email : null;\r\n  }\r\n\r\n  getUserName(): string | null {\r\n    const user = this.getCurrentUser();\r\n    return user ? user.nombreCompleto : null;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}