{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = 'http://localhost:3001/api/auth';\n      this.isLoggedInSubject = new BehaviorSubject(false);\n      this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      // Verificar si el usuario ya está logueado\n      this.checkAuthStatus();\n    }\n    checkAuthStatus() {\n      const token = this.getToken();\n      if (token) {\n        this.verifyToken().subscribe(response => {\n          if (response.success && response.usuario) {\n            this.isLoggedInSubject.next(true);\n            this.currentUserSubject.next(response.usuario);\n          } else {\n            this.logout();\n          }\n        });\n      }\n    }\n    getAuthHeaders() {\n      const token = this.getToken();\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      });\n    }\n    register(name, email, password) {\n      const body = {\n        nombreCompleto: name,\n        email: email,\n        password: password\n      };\n      return this.http.post(`${this.API_URL}/registro`, body, {\n        headers: this.getAuthHeaders()\n      }).pipe(map(response => {\n        if (response.success && response.token && response.usuario) {\n          this.setToken(response.token);\n          this.isLoggedInSubject.next(true);\n          this.currentUserSubject.next(response.usuario);\n        }\n        return response;\n      }), catchError(error => {\n        console.error('Error en registro:', error);\n        return of({\n          success: false,\n          message: error.error?.message || 'Error de conexión con el servidor'\n        });\n      }));\n    }\n    login(email, password) {\n      const body = {\n        email: email,\n        password: password\n      };\n      return this.http.post(`${this.API_URL}/login`, body, {\n        headers: this.getAuthHeaders()\n      }).pipe(map(response => {\n        if (response.success && response.token && response.usuario) {\n          this.setToken(response.token);\n          this.isLoggedInSubject.next(true);\n          this.currentUserSubject.next(response.usuario);\n        }\n        return response;\n      }), catchError(error => {\n        console.error('Error en login:', error);\n        return of({\n          success: false,\n          message: error.error?.message || 'Error de conexión con el servidor'\n        });\n      }));\n    }\n    verifyToken() {\n      return this.http.get(`${this.API_URL}/verificar`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(error => {\n        console.error('Error verificando token:', error);\n        return of({\n          success: false,\n          message: 'Token inválido'\n        });\n      }));\n    }\n    logout() {\n      localStorage.removeItem('authToken');\n      this.isLoggedInSubject.next(false);\n      this.currentUserSubject.next(null);\n    }\n    setToken(token) {\n      localStorage.setItem('authToken', token);\n    }\n    getToken() {\n      return localStorage.getItem('authToken');\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      return !!token;\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    getUserEmail() {\n      const user = this.getCurrentUser();\n      return user ? user.email : null;\n    }\n    getUserName() {\n      const user = this.getCurrentUser();\n      return user ? user.nombreCompleto : null;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}